#!/usr/bin/env bash
set -euo pipefail

# Define color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# export APP_NAME=my-new-app
if [ -z ${APP_NAME+x} ]; then # Fail if APP_NAME is not set
  printf "${RED}APP_NAME is not set.\nUsage: APP_NAME=my-new-app bin/new-project${NC}\n"
  exit 1
fi

# git clone --recursive git@github.com:ylogx/python-chassis.git ${APP_NAME}

printf "${YELLOW}Renaming python-chassis to ${APP_NAME}...${NC}\n"
# Deployment name
grep -lR --exclude-dir=".git" "python-chassis" . | xargs sed -i "s/python-chassis/${APP_NAME}/g"
# Documentation name
grep -lR --exclude-dir=".git" "Python Template" . | xargs sed -i "s/Python Template/${APP_NAME}/g"
# Package name
mv chassis_app ${APP_NAME//[-]/_}
grep -lR --exclude-dir=".git" "chassis_app" . | xargs sed -i "s/chassis_app/${APP_NAME//[-]/_}/g"
printf "${GREEN}Updated chassis names to ${APP_NAME}.${NC}\n"

# Only do this if the git remote url contains ylogx/python-chassis
if git remote -v | grep -q "ylogx/python-chassis"; then
  printf "${YELLOW}Initializing new git repository...${NC}\n"

  LATEST_COMMIT=$(git log --pretty=format:'%h' -n 1)
  rm -rf .git
  git init
  git add .
  git commit -m "Initial commit for ${APP_NAME}

Cloned from python-chassis: https://github.com/ylogx/python-chassis on $(date).
Latest commit: ${LATEST_COMMIT}
https://github.com/ylogx/python-chassis/tree/${LATEST_COMMIT}"
    printf "${GREEN}Initialized new git repository.${NC}\n"
else
  printf "${YELLOW}Skipping git initialization!${NC}\n"
fi

printf "${YELLOW}Setting up dependencies and virtual environment...${NC}\n"
make init
printf "${GREEN}Done!${NC}\n"
